// ===== –ú–æ–¥—É–ª–∏, –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ =====

// npm install fs path readline-sync @google/generative-ai gpt-tokenizer express crypto
const fs = require('fs');
const path = require('path');
const readline = require('readline-sync');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const tokenizer = require('gpt-tokenizer');
const express = require('express');
const crypto = require('crypto');

// –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É: A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z.
const projectPaths = {
	FILES: {
		// –ò–∑–º–µ–Ω—è—é—Ç—Å—è –∏–ª–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî –≤–Ω–µ—à–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
		ACCUMULATED: {
			AUTHENTIFICATION: path.join(__dirname, 'accumulated', 'authentification.json'),
			BLACKLIST: path.join(__dirname, 'accumulated', 'blacklist.json'),
			CHAT: path.join(__dirname, 'accumulated', 'chat.json'),
			HISTORY: path.join(__dirname, 'accumulated', 'history.json'),
			LOG: path.join(__dirname, 'accumulated', 'log.md'),
			MEMORY: path.join(__dirname, 'accumulated', 'memory.md'),
			PARSING_RESULT: path.join(__dirname, 'accumulated', 'parsing_result.txt'),

			TRACKING: {
				FILES: path.join(__dirname, 'accumulated', 'tracking', 'files.json'),
				FOLDERS: path.join(__dirname, 'accumulated', 'tracking', 'folders.json')
			},

			UNFREEZING: {
				LLM: path.join(__dirname, 'accumulated', 'unfreezing', 'llm.json'),
				USER: path.join(__dirname, 'accumulated', 'unfreezing', 'user.json')
			}
		},

		// –§–∞–π–ª—ã –Ω–µ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω—ã –æ—Ç –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å–ª—É–∂–∞—Ç –ª–∏—à—å —Ä–∞–¥–∏ —á—Ç–µ–Ω–∏—è.
		GENERAL: {
			CHARACTER: path.join(__dirname, 'general', 'character.md'),
			SETTINGS: path.join(__dirname, 'general', 'settings.json'),
			INSTRUCTIONS: path.join(__dirname, 'general', 'instructions.md'),
			API_KYES: path.join(__dirname, 'general', 'api_keys.json')
		}
	},

	FOLDERS: {
		WEBSITE: path.join(__dirname, 'website'),
		WORKSPACE: path.join(__dirname, 'workspace')
	}
};

let settings = {
	PROMPT_LIMITS: {
		TOTAL_TOKENS_COUNT: 786432, // 2^(19)√ó1.5
		
		HISTORY: {
			TURNS: 30,
			TOKENS: 98304 // 2^(16)√ó1.5
		},
		
		FETCH_URL: {
			BYTES: 2621440, // 2^(20)√ó2.5
			TOKENS: 196608 // 2^(17)√ó1.5
		}
	},

	WEBSITE: {
		SERVER_PORT: 3000,
		CLIENT_REFRESH: 3,

		LENGTH_LIMIT: {
			USERNAME: {
				MINIMUM: 3,
				MAXIMUM: 16
			},

			PASSWORD: {
				MINIMUM: 8,
				MAXIMUM: 64
			},

			MESSAGE: 4096
		}
	},

	API_REQUEST: {
		BETWEEN_QUERIES: 90,
		FOR_CASE_OF_FAILURE: 30
	}
};

const listOfCommands = [
	// üìí –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
	'MemoryAppend',
	'MemoryEdit',
	'MemoryRemove',

	// üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–µ–¥–µ–Ω–∏–µ —á–∞—Ç–∞
	'SendMessage',
	'DeleteMessage',
	'Punish',
	'Forgive',
	
	// üåê –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤
	'FetchURL',
	'ClearLastURLContent',

	// ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
	'CreateFile',
	'GetFileInfo',
	'TrackFile',
	'ForgetFile',
	'CreateDirectory',
	'TrackDirectory',
	'ForgetDirectory',
	'Delete',
	'Move',
	'Rename',
	'AddToFile',
	'ReplaceInFile',
	'RemoveFromFile',
	'RewriteFile',

	// üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
	'ClearHistory',
	'Wait'
];

const isUsed = {
	SEND_MESSAGE: false,
	FETCH_URL: false,
	CLEAR_LAST_URL_CONTENT: false,
	CLEAR_HISTORY: false,
	WAIT: false
};

let geminiApiKey = null;
let breakMainCycle = false;



// ===== –ú–µ–ª–∫–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====

function finishProcess() {
	breakMainCycle = true;
	readline.question('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. –ù–∞–∂–º–∏—Ç–µ ¬´Enter¬ª –¥–ª—è –≤—ã—Ö–æ–¥–∞‚Ä¶');
	process.exit();
}

function setConsoleTitle(name) {
	process.stdout.write(`\x1b]0;${name}\x07`);
}

function getTimestamp() {
	const options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' };
	return new Intl.DateTimeFormat('ru-RU', options).format(new Date());
}

function simplificationNumeral(number) {
	if (number > 19 && number < 100) {
		return number % 10;
	}
	if (number > 99) {
		number = number % 100;
		if (number > 19 && number < 100) {
			return number % 10;
		}
	}
	return number;
}

/**
 * –°–ø—Ä—è–≥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º.
 * @param {Number} number –ß–∏—Å–ª–æ, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç —Å–ø—Ä—è–≥–∞—Ç—å—Å—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ.
 * @param {String} foundation –ù–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞.
 * @param {String} additionOne –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 4.
 * @param {String} additionTwo –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ 1.
 * @param {String} additionThree –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, –∫–æ–≥–¥–∞ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ 2, 3 –∏–ª–∏ 4.
 */
function matchWord(number, foundation, additionOne, additionTwo, additionThree) {
	number = simplificationNumeral(number);
	if (number == 0 || number > 4) {
		return foundation + additionOne;
	}
	if (number == 1) {
		return foundation + additionTwo;
	}
	return foundation + additionThree;
}

function getSha256Hash(stringValue) {
	const hash = crypto.createHash('sha256');
	hash.update(stringValue, 'utf8');
	return hash.digest('hex');
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
 * @param {object} structure –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞.
 * @returns {string[]} –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
 */
function getAllStringValues(structure) {
    // –ú–µ—Ç–æ–¥ flatMap –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–æ–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º "—Ä–∞–∑–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º" –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
    return Object.values(structure).flatMap(value => {
        if (typeof value === 'string') {
			return value;
		} else if (typeof value === 'object' && value !== null) {
			return getAllStringValues(value);
		}
        return []; // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
    });
}

const allProjectPaths = getAllStringValues(projectPaths);

function testForProjectPath(objectPath) {
	if (!allProjectPaths.includes(objectPath)) {
		console.error(`–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å ¬´${path.relative(__dirname, objectPath)}¬ª –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É.`);
		finishProcess();
	}
}

function writeIntoFile(objectPath, content) {
	fs.mkdirSync(path.dirname(objectPath), { recursive: true });
	fs.writeFileSync(objectPath, content, 'utf-8');
}

function appendIntoFile(objectPath, content) {
	fs.mkdirSync(path.dirname(objectPath), { recursive: true });
	fs.appendFileSync(objectPath, content, 'utf-8');
}

function stripHtmlTags(html) {
	let result = html;
	result = result.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '');
	result = result.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
	result = result.replace(/<!--[\s\S]*?-->/g, '');
	result = result.replace(/<a[^>]*?href=["']([^"']*)["'][^>]*?>(.*?)<\/a>/gis, (match, href, linkText) => {
		const cleanedLinkText = linkText.replace(/<[^>]*>/g, '');
		return cleanedLinkText.trim() ? `${cleanedLinkText.trim()} (${href})` : `(${href})`;
	});
	result = result.replace(/<[^>]*>/g, '');
	result = result.replace(/¬†/g, ' ');
	result = result.replace(/&/g, '&');
	result = result.replace(/</g, '<');
	result = result.replace(/>/g, '>');
	result = result.replace(/"/g, '"');
	result = result.replace(/&#(\d+);/g, (match, code) => String.fromCharCode(parseInt(code, 10)));
	result = result.replace(/&#x([0-9A-Fa-f]+);/g, (match, code) => String.fromCharCode(parseInt(code, 16)));
	result = result.replace(/\s{2,}/g, ' ');
	result = result.replace(/\n\s*\n/g, '\n\n');
	return result.trim();
}

function formatErrorMessage(error) {
    return error.message.replace(/\s+/g, ' ').trim();
}

function checkWorkspaceFolderExistence() {
	const projectObject = projectPaths.FOLDERS.WORKSPACE;
	if (!fs.existsSync(projectObject)) {
		fs.mkdirSync(projectObject, { recursive: true });
		console.log('–°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—Ç–∞–Ω—Ü–∏–∏.');
	}
}



// ===== –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∫–æ–Ω—Å–æ–ª–∏ =====

const originalConsoleLog = console.log;
const originalConsoleError = console.error;
console.log = function(message) {
	const record = `[LOG] [${getTimestamp()}] ${message}`;
	originalConsoleLog(record);
	try {
		appendIntoFile(projectPaths.FILES.ACCUMULATED.LOG, record + '\n');
	} catch (error) {
		originalConsoleError(`–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞, –º–µ—à–∞—é—â–∞—è –≤–µ—Å—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥–∞ ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
};
console.error = function(message) {
	const record = `[ERROR] [${getTimestamp()}] ${message}`;
	originalConsoleError(record);
	try {
		appendIntoFile(projectPaths.FILES.ACCUMULATED.LOG, record + '\n');
	} catch (error) {
		originalConsoleError(`–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞, –º–µ—à–∞—é—â–∞—è –≤–µ—Å—Ç–∏ —Ñ–∞–π–ª –ª–æ–≥–∞ ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
};



// ===== –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ =====

function binaryFileExpectation(filePath) {
	const fileBuffer = fs.readFileSync(filePath);
	let isBinary = false;
	let fileContent;
	try {
		fileContent = fileBuffer.toString('utf-8');
		if (fileBuffer.some(byte => byte === 0)) {
			isBinary = true;
			fileContent = null;
		}
	} catch (error) {
		isBinary = true;
		fileContent = null;
	}
	return [isBinary, fileContent];
}

function validateFileAndGetText(objectPath) {
	if (!fs.existsSync(objectPath)) {
		throw new Error('–û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.');
	}
	const stats = fs.statSync(objectPath);
	if (!stats.isFile()) {
		throw new Error('–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤–µ–¥—ë—Ç –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.');
	}
	const [isBinary, fileContent] = binaryFileExpectation(objectPath);
	if (isBinary) {
		throw new Error('–§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç.');
	}
	return fileContent;
}



// ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ =====

function readProjectFileContent(objectPath, designation, couldBeEmpty) {
	testForProjectPath(objectPath);
	let fileContent = '';
	try {
		let didFileExist = false;

		if (!fs.existsSync(objectPath)) {
			writeIntoFile(objectPath, '');
			const feedback = `–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª ${designation}.`;
			if (!couldBeEmpty) {
				console.error(`${feedback} –ï–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å.`);
				finishProcess();
			}
			console.log(feedback);
		} else {
			didFileExist = true;
		}

		if (didFileExist) {
			fileContent = validateFileAndGetText(objectPath);
			if (!couldBeEmpty && fileContent === '') {
				console.error(`–§–∞–π–ª ${designation} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`);
				finishProcess();
			}
		}
	} catch (error) {
		console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${designation} ‚Üí ${formatErrorMessage(error)}`);
		try {
			writeIntoFile(objectPath, '');
		} catch (exception) {
			finishProcess();
		}
	}
	return fileContent;
}

function readArrayFromProjectFile(objectPath) {
	testForProjectPath(objectPath);
	let collection = [];
	try {
		if (!fs.existsSync(objectPath)) {
			writeIntoFile(objectPath, JSON.stringify([]));
			console.log(`–ë—ã–ª —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ¬´${path.relative(__dirname, objectPath)}¬ª —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.`);
		} else {
			const parsedContent = JSON.parse(validateFileAndGetText(objectPath));
			if (Array.isArray(parsedContent)) {
				collection = parsedContent;
			} else {
				console.error(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ¬´${path.relative(__dirname, objectPath)}¬ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º ‚Äî –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω.`);
				writeIntoFile(objectPath, JSON.stringify([]));
			}
		}
	} catch (error) {
		console.error(`–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ ¬´${path.relative(__dirname, objectPath)}¬ª ‚Üí ${formatErrorMessage(error)}`);
		try {
			writeIntoFile(objectPath, JSON.stringify([]));
		} catch (exception) {
			finishProcess();
		}
	}
	return collection;
}



// ===== –ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π =====

function validateHistoryAndGetArray() {
	const projectObject = projectPaths.FILES.ACCUMULATED.HISTORY;
	const collection = readArrayFromProjectFile(projectObject);
	if (collection.length === 0) {
		return [];
	}
	if (
		!collection.every(structure => typeof structure.TIMESTAMP === 'string') ||
		!collection.every(structure => typeof structure.CONTENT === 'string')
	) {
		console.error('–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–¥—á–∏—Å—Ç—É—é.');
		writeIntoFile(projectObject, JSON.stringify([]));
		return [];
	}
	return collection;
}

function updateHistory(content) {
	let collection = validateHistoryAndGetArray();
	try {
		collection.push({
			TIMESTAMP: getTimestamp(),
			CONTENT: content
		});
		const turns = settings.PROMPT_LIMITS.HISTORY.TURNS;
		// –ú–µ—Ç–æ–¥ slice –∫–æ–ø–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –ø—Ä–∏ —ç—Ç–æ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è. –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äî –∏–Ω–¥–µ–∫—Å, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–¥—ë—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—Ç–æ—Ä–æ–π ‚Äî –∏–Ω–¥–µ–∫—Å, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (–ù–ï –≤–∫–ª—é—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ —ç—Ç–∏–º –∏–Ω–¥–µ–∫—Å–æ–º).
		if (collection.length > turns) {
			collection = collection.slice(1, turns + 1);
		}
		writeIntoFile(projectPaths.FILES.ACCUMULATED.HISTORY, JSON.stringify(collection, null, '\t'));
	} catch (error) {
		console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
}

function formHistoryContent() {
	const collection = validateHistoryAndGetArray();
	try {
		const prepared = [];
		if (collection.length === 1) {
			prepared.push(`[${collection[0].TIMESTAMP}] ‚Üí {\n${collection[0].CONTENT}\n}`);
		} else {
			for (let elementNumber = 1; elementNumber <= collection.length; elementNumber++) {
				prepared.push(`${elementNumber}. [${collection[elementNumber - 1].TIMESTAMP}] ‚Üí {\n${collection[elementNumber - 1].CONTENT}\n}`);
			}
		}

		const result = [];
		let complete = false;
		let remainingTokensCount = settings.PROMPT_LIMITS.HISTORY.TOKENS;
		for (let elementIndex = prepared.length - 1; elementIndex > -1 && !complete; elementIndex--) {
			const record = prepared[elementIndex];
			const requiredAmount = tokenizer.encode(record).length;
			if (requiredAmount <= remainingTokensCount) {
				result.unshift(record);
				remainingTokensCount -= requiredAmount;
			} else {
				complete = true;
			}
		}
		return result.join('\n\n');
	} catch (error) {
		console.error(`–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
}



// ===== –ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–æ–º =====

function validateChatAndGetArray() {
	const projectObject = projectPaths.FILES.ACCUMULATED.CHAT;
	const collection = readArrayFromProjectFile(projectObject);
	if (collection.length === 0) {
		return [];
	}
	if (
		!collection.every(structure => typeof structure.TIMESTAMP === 'string') ||
		!collection.every(structure => typeof structure.NICKNAME === 'string') ||
		!collection.every(structure => typeof structure.ROLE === 'string') ||
		!collection.every(structure => typeof structure.IDENTIFIER === 'number') ||
		!collection.every(structure => typeof structure.CONTENT === 'string')
	) {
		console.error('–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ —á–∞—Ç–∞ ‚Äî –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–¥—á–∏—Å—Ç—É—é.');
		writeIntoFile(projectObject, JSON.stringify([]));
		return [];
	}
	return collection;
}

function generateMessageIdentifier() {
	const collection = validateChatAndGetArray();
	if (collection.length === 0) {
		return 1;
	}
	const existingIdentifiers = new Set(collection.map(structure => structure.IDENTIFIER));
	let maximumValue = 0;
	for (let currentValue of existingIdentifiers) {
		if (currentValue > maximumValue) {
			maximumValue = currentValue;
		}
	}
	return maximumValue + 1;
}

function pushChatMessage(nickname, content, role, ipAddress) {
	const collection = validateChatAndGetArray();
	try {
		const newStructure = {
			TIMESTAMP: getTimestamp(),
			NICKNAME: nickname,
			ROLE: role,
			IDENTIFIER: generateMessageIdentifier(),
			CONTENT: content
		};
		if (ipAddress !== null) {
			newStructure.IP_ADDRESS = ipAddress;
		}
		collection.push(newStructure);

		writeIntoFile(projectPaths.FILES.ACCUMULATED.CHAT, JSON.stringify(collection, null, '\t'));
		let result = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <${nickname}> (${role}) [–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: ¬´${newStructure.IDENTIFIER}¬ª]`;
		const ipPart = ipAddress !== null ? `[IP-–∞–¥—Ä–µ—Å: ¬´${ipAddress}¬ª]` : '';
		if (ipPart !== '') {
			result = `${result} ${ipPart} –≤–Ω–µ—Å–µ–Ω–æ –≤ —á–∞—Ç.`;
		}
		return [true, result];
	} catch (error) {
		return [false, `–ù–µ —É–¥–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ‚Üí ${formatErrorMessage(error)}`];
	}
}

function deleteChatMessage(identifier) {
	const initial = validateChatAndGetArray();
	const updated = initial.filter(structure => structure.IDENTIFIER !== identifier);

	let feedback = `–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º ¬´${identifier}¬ª`;
	if (updated.length < initial.length) {
		try {
			writeIntoFile(projectPaths.FILES.ACCUMULATED.CHAT, JSON.stringify(updated, null, '\t'));
			return [true, `${feedback} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞.`];
		} catch (error) {
			return [false, `${feedback} –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–∞—Ç–∞ ‚Üí ${formatErrorMessage(error)}`];
		}
	} else {
		return [false, `${feedback} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ.`];
	}
}

function formChatContent(isIpPartRequired) {
	const collection = validateChatAndGetArray();
	if (collection.length === 0) {
		return '';
	}
	return collection.map(structure => {
		let result = `[${structure.TIMESTAMP}] <${structure.NICKNAME}> (${structure.ROLE}) [–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: ¬´${structure.IDENTIFIER}¬ª]`;
		if (isIpPartRequired) {
			const ipPart = structure.IP_ADDRESS ? `[IP-–∞–¥—Ä–µ—Å: ¬´${structure.IP_ADDRESS}¬ª]` : '';
			if (ipPart !== '') result = `${result} ${ipPart}`;
		}
		return `${result} ‚Üí {\n${structure.CONTENT}\n}`;
	}).join('\n\n');
}



// ===== –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====

function validateAuthentificationAndGetArray() {
	const projectObject = projectPaths.FILES.ACCUMULATED.AUTHENTIFICATION;
	const collection = readArrayFromProjectFile(projectObject);
	if (collection.length === 0) {
		return [];
	}
	if (
		!collection.every(structure => typeof structure.USERNAME === 'string') ||
		!collection.every(structure => typeof structure.HASHCODE === 'string')
	) {
		console.error('–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–¥—á–∏—Å—Ç—É—é.');
		writeIntoFile(projectObject, JSON.stringify([]));
		return [];
	}
	return collection;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} username –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} passwordHash SHA-256 —Ö—ç—à –ø–∞—Ä–æ–ª—è.
 * @returns {boolean} true –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, false –∏–Ω–∞—á–µ.
 */
function authenticateUser(username, passwordHash) {
	const collection = validateAuthentificationAndGetArray();
	const existingUser = collection.find(structure => structure.USERNAME === username);

	try {
		if (!existingUser) {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ
			collection.push({ USERNAME: username, HASHCODE: passwordHash });
			writeIntoFile(projectPaths.FILES.ACCUMULATED.AUTHENTIFICATION, JSON.stringify(collection, null, '\t'));
			console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´${username}¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
			return true;
		} else {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
			if (existingUser.HASHCODE === passwordHash) {
				return true;
			} else {
				console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´${username}¬ª –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.`);
				return false;
			}
		}
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Üí ${formatErrorMessage(error)}`);
		return false;
	}
}



// ===== –ú–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ =====

function validateBlacklistAndGetArray() {
	const projectObject = projectPaths.FILES.ACCUMULATED.BLACKLIST;
	const collection = readArrayFromProjectFile(projectObject);
	if (
		!collection.every(structure => typeof structure.TIMESTAMP === 'string') ||
		!collection.every(structure => typeof structure.USERNAME === 'string') ||
		!collection.every(structure => typeof structure.IP_ADDRESS === 'string') ||
		!collection.every(structure => typeof structure.REASON === 'string')
	) {
		console.error('–ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ‚Äî –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–¥—á–∏—Å—Ç—É—é.');
		writeIntoFile(projectObject, JSON.stringify([]));
		return [];
	}
	return collection;
}

function pushIntoBlacklist(username, ipAddress, reason) {
	const collection = validateBlacklistAndGetArray();
	try {
		if (collection.some(structure => structure.USERNAME === username)) {
			return '–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.'
		} else if (collection.some(structure => structure.IP_ADDRESS === ipAddress)) {
			return '–£–∫–∞–∑–∞–Ω–Ω—ã–π IP-–∞–¥—Ä–µ—Å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.';
		}
		collection.push({
			TIMESTAMP: getTimestamp(),
			USERNAME: username,
			IP_ADDRESS: ipAddress,
			REASON: reason
		});
		writeIntoFile(projectPaths.FILES.ACCUMULATED.BLACKLIST, JSON.stringify(collection, null, '\t'));
		return '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–ø—Ä–µ—â—ë–Ω IP-–∞–¥—Ä–µ—Å.';
	} catch (error) {
		return `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Üí ${formatErrorMessage(error)}`;
	}
}

function deleteFromBlacklist(ipAddress) {
	const initial = validateBlacklistAndGetArray();
	const updated = initial.filter(structure => structure.IP_ADDRESS !== ipAddress);

	let feedback = `–ó–∞–ø–∏—Å—å —Å IP-–∞–¥—Ä–µ—Å–æ–º ¬´${ipAddress}¬ª`;
	if (updated.length < initial.length) {
		try {
			writeIntoFile(projectPaths.FILES.ACCUMULATED.BLACKLIST, JSON.stringify(updated, null, '\t'));
			return [true, `${feedback} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.`];
		} catch (error) {
			return [false, `${feedback} –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–µ—Ä–µ—Ç—å ‚Üí ${formatErrorMessage(error)}`];
		}
	} else {
		return [false, `${feedback} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`];
	}
}

function formBlacklistContent() {
	const collection = validateBlacklistAndGetArray();
	if (collection.length === 0) {
		return '';
	}
	return collection.map(structure => {
		return `[${structure.TIMESTAMP}] –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ¬´${structure.USERNAME}¬ª [IP-–∞–¥—Ä–µ—Å: ¬´${structure.IP_ADDRESS}¬ª] –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚Üí {\n${structure.REASON}\n}`;
	}).join('\n\n');
}



// ===== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã =====

function checkDirectoryAndGetVisualization(objectPath) {
	if (!fs.existsSync(objectPath)) {
		throw new Error('–û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.');
	}
	const stats = fs.statSync(objectPath);
	if (!stats.isDirectory()) {
		throw new Error('–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤–µ–¥—ë—Ç –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º.');
	}

	const objects = fs.readdirSync(objectPath, { withFileTypes: true });
	const sortedObjects = objects.sort((firstObject, secondObject) => {
		if (firstObject.isDirectory() && !secondObject.isDirectory()) {
			return -1;
		}
		if (!firstObject.isDirectory() && secondObject.isDirectory()) {
			return 1;
		}
		return firstObject.name.localeCompare(secondObject.name);
	});

	const result = sortedObjects.map(object => {
		if (object.isDirectory()) {
			return `[DIRECTORY] ${object.name}`;
		} else if (object.isFile()) {
			return `[FILE] ${object.name}`;
		}
		return `[OTHER] ${object.name}`;
	}).join('\n');

	if (result.length === 0) {
		return `–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ¬´${objectPath}¬ª –ø—É—Å—Ç–∞.`;
	} else {
		return `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ¬´${objectPath}¬ª ‚Üí {\n${result}\n}`;
	}
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–±–æ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * @param {string} projectObject –ü—É—Ç—å –¥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–∞—Å—Å–∏–≤–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—É—Ç–µ–π, —è–≤–ª—è—é—â–µ–≥–æ—Å—è —á–∞—Å—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞.
 * @param {Function} processor –§—É–Ω–∫—Ü–∏—è, —Å–ª—É–∂–∞—â–∞—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
 * @param {string} designation –°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –æ–±—Ä–∞–∑–æ–º –≤—Å—Ç–∞—Ç—å –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ.
 * @returns {string[]} –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –≥–æ—Ç–æ–≤—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
 */
function reviseTrackedPathsAndCollectData(projectObject, processor, designation) {
	const initial = readArrayFromProjectFile(projectObject);
	const contentArray = [];
	if (!initial.every(elementValue => typeof elementValue === 'string')) {
		writeIntoFile(projectObject, JSON.stringify([]));
	} else {
		let updated = [];
		for (let objectPath of initial) {
			try {
				if (!path.resolve(objectPath).startsWith(projectPaths.FOLDERS.WORKSPACE)) {
					throw new Error('–ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.');
				}
				contentArray.push(processor(objectPath));
				updated.push(objectPath);
			} catch (exception) {
				console.error(`–ë—ã–ª —Å–±—Ä–æ—à–µ–Ω –ø—É—Ç—å –¥–æ ${designation}: ¬´${objectPath}¬ª ‚Üí ${formatErrorMessage(exception)}.`);
			}
		}
		if (initial.length !== updated.length) {
			writeIntoFile(projectObject, JSON.stringify(updated, null, '\t'));
		}
	}
	return contentArray;
}

function formTrackingContent() {
	try {
		const filesContentArray = reviseTrackedPathsAndCollectData (
			projectPaths.FILES.ACCUMULATED.TRACKING.FILES,
			(objectPath) => `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª ‚Üí{\n${validateFileAndGetText(objectPath)}\n}`,
			'–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞'
		);
		const directoriesContentArray = reviseTrackedPathsAndCollectData (
			projectPaths.FILES.ACCUMULATED.TRACKING.FOLDERS,
			(objectPath) => checkDirectoryAndGetVisualization(objectPath),
			'–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏'
		);

		let result = [];
		if (filesContentArray.length !== 0) {
			result.push(`=== –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ñ–∞–π–ª—ã ===\n\n${filesContentArray.join('\n\n')}`);
		}
		if (directoriesContentArray.length !== 0) {
			result.push(`=== –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===\n\n${directoriesContentArray.join('\n\n')}`);
		}
		return result.join('\n\n');
	} catch (error) {
		console.error(`–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
}



// ===== –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –º–µ—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ =====

function readTimestampFromProjectStorage(objectPath) {
	let fileContent = readProjectFileContent(objectPath, '—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏', true);
	let timestamp = 0;
	try {
		if (fileContent === '') {
			writeIntoFile(objectPath, JSON.stringify(0));
			console.log(`–§–∞–π–ª ¬´${path.relative(__dirname, objectPath)}¬ª –±—ã–ª –ø—É—Å—Ç, –ø–æ—ç—Ç–æ–º—É –≤ –Ω–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω—É–ª–µ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.`);
		} else {
			const parsedContent = JSON.parse(fileContent);
			if (typeof parsedContent === 'number' && Number.isInteger(parsedContent)) {
				timestamp = parsedContent;
			} else {
				console.error(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ¬´${path.relative(__dirname, objectPath)}¬ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º ‚Äî –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª–µ–≤–æ–π –æ—Ç–º–µ—Ç–∫–æ–π.`);
				writeIntoFile(objectPath, JSON.stringify(0));
			}
		}
	} catch (error) {
		console.error(`–ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞ ¬´${path.relative(__dirname, objectPath)}¬ª –Ω–µ –≤—ã—à–ª–æ ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
	return timestamp;
}

function writeTimestampIntoProjectStorage(filePath, timestamp) {
	testForProjectPath(filePath);
	try {
		if (typeof timestamp !== 'number' || !Number.isInteger(timestamp)) {
			throw new Error('–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.');
		}
		writeIntoFile(filePath, JSON.stringify(timestamp));
	} catch (error) {
		console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–∞–π–ª ¬´${path.relative(__dirname, filePath)}¬ª ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
}



// ===== –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä =====

// –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∏—á–µ–≥–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.

function checkNotEmptyStringField(content, designation) {
	let feedback = null;
	if (content === null) feedback = `–ü–æ–ª–µ —Å ${designation} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`;
	else if (typeof content !== 'string' || content === '') feedback = `–ü–æ–ª–µ —Å ${designation} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.`;
	return feedback;
}

function checkIntegerField(content, designation) {
	let feedback = null;
	if (content === null) feedback = `–ü–æ–ª–µ —Å ${designation} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`;
	else if (typeof content !== 'number' || !Number.isInteger(content)) feedback = `–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —Å ${designation} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.`;
	return feedback;
}

function checkNaturalNumberField(content, designation) {
	let feedback = checkIntegerField(content, designation);
	if (feedback !== null || content <= 0) feedback = `–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è —Å ${designation} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.`;
	return feedback;
}

function checkPortNumber(content, designation) {
	let feedback = checkIntegerField(content, designation);
	if (feedback !== null || content < 0 || content > 65535) feedback = `–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ${designation}.`;
	return feedback;
}



// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ =====

function checkApiKeysAndGetArray() {
	const projectObject = projectPaths.FILES.GENERAL.API_KYES;
	const collection = readArrayFromProjectFile(projectObject);
	if (collection.length === 0) {
		console.error(`–ù–∏ –æ–¥–∏–Ω –∫–ª—é—á –æ—Ç Gemini API –Ω–µ —É–∫–∞–∑–∞–Ω.`);
		finishProcess();
	}
	if (!collection.every(elementValue => typeof elementValue === 'string')) {
		console.error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª—é—á–µ–π –æ—Ç Gemini API ‚Äî –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–¥—á–∏—Å—Ç—É—é.');
		writeIntoFile(projectObject, JSON.stringify([]));
		finishProcess();
	}
	return collection;
}

function exceptApiKey(existingValue) {
	const initial = checkApiKeysAndGetArray();
	const updated = initial.filter(elementValue => elementValue !== existingValue);
	writeIntoFile(projectPaths.FILES.GENERAL.API_KYES, JSON.stringify(updated, null, '\t'));
}

function tryChangeApiKey(currentValue) {
	const collection = checkApiKeysAndGetArray();
	if (collection.length > 1) {
		const currentIndex = collection.indexOf(currentValue);
		if (currentIndex === -1 || currentIndex === collection.length - 1) {
			return collection[0];
		} else {
			return collection[currentIndex + 1];
		}
	} else {
		return currentValue;
	}
}

function readSettings() {
	try {
		const projectObject = projectPaths.FILES.GENERAL.SETTINGS;
		if (!fs.existsSync(projectObject)) {
			writeIntoFile(projectObject, JSON.stringify(settings, null, '\t'));
			console.log('–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.');
		} else {
			settings = JSON.parse(readProjectFileContent(projectObject, '—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã', false)); 
		}

		let result;
		let errors = [];
		let givenValue;

		givenValue = settings.PROMPT_LIMITS.TOTAL_TOKENS_COUNT;
		result = checkNaturalNumberField(givenValue, '—á–∏—Å–ª–æ–º —Ç–æ–∫–µ–Ω–æ–≤, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞,');
		if (result !== null) {
			errors.push(result);
		} else if (givenValue < 524288) {
			errors.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø—Ä–µ–¥–µ–ª —á–∏—Å–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ');
		}

		givenValue = settings.PROMPT_LIMITS.HISTORY.TURNS;
		result = checkNaturalNumberField(givenValue, '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ö–æ–¥–æ–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏—Å—Ç–æ—Ä–∏–∏');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.PROMPT_LIMITS.HISTORY.TOKENS;
		result = checkNaturalNumberField(givenValue, '—á–∏—Å–ª–æ–º —Ç–æ–∫–µ–Ω–æ–≤, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–º —Ä–∞–º–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–¥–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏,');
		if (result !== null) {
			errors.push(result);
		} else if (givenValue > 524288) {
			errors.push('–ù–µ–ª—å–∑—è —É–¥–µ–ª—è—Ç—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–æ–ª—å –±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å —Ç–æ–∫–µ–Ω–æ–≤.');
		} else if (givenValue < 1024 * settings.PROMPT_LIMITS.HISTORY.TURNS) {
			errors.push('–£–∫–∞–∑–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–ª–æ–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏.');
		}

		givenValue = settings.PROMPT_LIMITS.FETCH_URL.BYTES;
		result = checkNaturalNumberField(givenValue, '–ª–∏–º–∏—Ç–æ–º –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –±–∞–π—Ç–æ–≤ –¥–ª—è URL-–∫–æ–Ω—Ç–µ–Ω—Ç–∞');
		if (result !== null) {
			errors.push(result);
		} else if (givenValue < 524288) {
			errors.push('–õ–∏–º–∏—Ç –±–∞–π—Ç–æ–≤ –¥–ª—è URL-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª.');
		}

		givenValue = settings.PROMPT_LIMITS.FETCH_URL.TOKENS;
		result = checkNaturalNumberField(givenValue, '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞');
		if (result !== null) {
			errors.push(result);
		} else if (givenValue < 4096) {
			errors.push('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ —Å–ª–∏—à–∫–æ–º –≥—Ä—É–±–æ–µ.');
		}

		givenValue = settings.WEBSITE.SERVER_PORT;
		result = checkPortNumber(givenValue, '–ø–æ—Ä—Ç–æ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.WEBSITE.CLIENT_REFRESH;
		result = checkNaturalNumberField(givenValue, '–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.WEBSITE.LENGTH_LIMIT.USERNAME.MINIMUM;
		result = checkNaturalNumberField(givenValue, '–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.WEBSITE.LENGTH_LIMIT.USERNAME.MAXIMUM;
		result = checkNaturalNumberField(givenValue, '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
		if (result !== null) {
			errors.push(result);
		} else if (givenValue < settings.WEBSITE.LENGTH_LIMIT.USERNAME.MINIMUM) {
			errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.');
		}

		givenValue = settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MINIMUM;
		result = checkNaturalNumberField(givenValue, '–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –ø–∞—Ä–æ–ª—è');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MAXIMUM;
		result = checkNaturalNumberField(givenValue, '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π –ø–∞—Ä–æ–ª—è');
		if (result !== null) {
			errors.push(result);
		} else if (givenValue < settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MINIMUM) {
			errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.');
		}

		givenValue = settings.WEBSITE.LENGTH_LIMIT.MESSAGE;
		result = checkNaturalNumberField(givenValue, '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.API_REQUEST.BETWEEN_QUERIES;
		result = checkNaturalNumberField(givenValue, '—Ç–∞–π–º–µ—Ä–æ–º –æ—Ç–∫–∞—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
		if (result !== null) {
			errors.push(result);
		}

		givenValue = settings.API_REQUEST.FOR_CASE_OF_FAILURE;
		result = checkNaturalNumberField(givenValue, '—Ç–∞–π–º–µ—Ä–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏');
		if (result !== null) {
			errors.push(result);
		}

		if (errors.length > 0) {
			throw new Error(errors.join(' '));
		}
	} catch (error) {
		console.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Üí ${formatErrorMessage(error)}`);
		finishProcess();
	}
}

readSettings();



// ===== –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω-—á–∞—Ç–∞ =====

const application = express();
application.use(express.json());
application.use(express.static(projectPaths.FOLDERS.WEBSITE));

application.get('/hashcode', (request, response) => {
	try {
		response.json({
			SUCCESS: true,
			HASHCODE: getSha256Hash(formChatContent(false))
		});
	} catch (error) {
		console.error(`–°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö—ç—à-–∫–æ–¥ ‚Üí ${formatErrorMessage(error)}`);
		response.status(500).json({
			SUCCESS: false
		});
	}
});

application.get('/chat', (request, response) => {
	try {
		response.json({
			SUCCESS: true,
			CHAT: formChatContent(false)
		});
	} catch (error) {
		console.error(`–ù–µ –≤—ã—à–ª–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É ‚Üí ${formatErrorMessage(error)}`);
		response.status(500).json({
			SUCCESS: false,
			MESSAGE: '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç.'
		});
	}
});

application.get('/settings', (request, response) => {
	try {
		response.json({
			SUCCESS: true,
			CLIENT_REFRESH: settings.WEBSITE.CLIENT_REFRESH,
			LENGTH_LIMIT: {
				USERNAME: {
					MINIMUM: settings.WEBSITE.LENGTH_LIMIT.USERNAME.MINIMUM,
					MAXIMUM: settings.WEBSITE.LENGTH_LIMIT.USERNAME.MAXIMUM
				},
				PASSWORD: {
					MINIMUM: settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MINIMUM,
					MAXIMUM: settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MAXIMUM
				},
				MESSAGE: settings.WEBSITE.LENGTH_LIMIT.MESSAGE
			}
		});
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∏–µ–Ω—Ç—É ‚Üí ${formatErrorMessage(error)}`);
		response.status(500).json({
			SUCCESS: false,
			MESSAGE: '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
		});
	}
});

application.post('/message', async (request, response) => {
	try {
		const userUnfreezingTimestamp = readTimestampFromProjectStorage(projectPaths.FILES.ACCUMULATED.UNFREEZING.USER);
		if (Date.now() < userUnfreezingTimestamp) {
			const remainingSeconds = Math.ceil((userUnfreezingTimestamp - Date.now()) / 1000);
			return response.status(429).json({
				SUCCESS: false,
				MESSAGE: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${remainingSeconds} ${matchWord(remainingSeconds, '—Å–µ–∫—É–Ω–¥', '', '—É', '—ã')} –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.`
			});
		}

		let { username, password, message } = request.body;
		username = username.replace(/\s+/g, ' ').trim();
		password = password.trim();
		message = message.trim();
		const ipAddress = request.ip;

		const blacklist = validateBlacklistAndGetArray();
		let rejectionReason = '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.';
		let preventAction = false;
		if (blacklist.some(structure => structure.USERNAME === username)) {
			preventAction = true;
			rejectionReason += ' –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.'
		} else if (blacklist.some(structure => structure.IP_ADDRESS === ipAddress)) {
			preventAction = true;
			rejectionReason += ' –í–∞—à IP-–∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.'
		}
		if (preventAction) {
			console.log(`–û—Ç–∫–∞–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬´${username}¬ª —Å IP-–∞–¥—Ä–µ—Å–∞ ¬´${ipAddress}¬ª: ¬´${rejectionReason}¬ª.`);
			return response.status(403).json({
				SUCCESS: false,
				MESSAGE: rejectionReason
			});
		}

		const availableUsernameSymbols = /^[a-zA-Z–∞-—è–ê-–Ø0-9_ ]+$/;
		const minimumUsernameLength = settings.WEBSITE.LENGTH_LIMIT.USERNAME.MINIMUM;
		const maximumUsernameLength = settings.WEBSITE.LENGTH_LIMIT.USERNAME.MAXIMUM;
		const availablePasswordSymbols = /^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+$/;
		const minimumPasswordLength = settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MINIMUM;
		const maximumPasswordLength = settings.WEBSITE.LENGTH_LIMIT.PASSWORD.MAXIMUM;
		const limitMessageLength = settings.WEBSITE.LENGTH_LIMIT.MESSAGE;
		const validationErrors = [];

		if (!username || typeof username !== 'string' || username.length === 0) {
			validationErrors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
		} else if (!availableUsernameSymbols.test(username)) {
			validationErrors.push('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ, –ø—Ä–æ–±–µ–ª –∏ —Ü–∏—Ñ—Ä—ã.');
		} else if (username.length < minimumUsernameLength) {
			validationErrors.push(`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${minimumUsernameLength} ${matchWord(minimumUsernameLength, '—Å–∏–º–≤–æ–ª', '–æ–≤', '', '–∞')}.`);
		} else if (username.length > maximumUsernameLength) {
			validationErrors.push(`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${maximumUsernameLength} ${matchWord(maximumUsernameLength, '—Å–∏–º–≤–æ–ª', '–æ–≤', '', '–∞')}.`);
		}
		
		if (!password || typeof password !== 'string' || password.length === 0) {
			validationErrors.push('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
		} else if (!availablePasswordSymbols.test(password)) {
			validationErrors.push('–ü–∞—Ä–æ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.');
		} else if (password.length < minimumPasswordLength) {
			validationErrors.push(`–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${minimumPasswordLength} ${matchWord(minimumPasswordLength, '—Å–∏–º–≤–æ–ª', '–æ–≤', '', '–∞')}.`);
		} else if (password.length > maximumPasswordLength) {
			validationErrors.push(`–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${maximumPasswordLength} ${matchWord(maximumPasswordLength, '—Å–∏–º–≤–æ–ª', '–æ–≤', '', '–∞')}.`);
		}

		if (!message || typeof message !== 'string' || message.length === 0) {
			validationErrors.push('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
		} else if (message.length > limitMessageLength) {
			validationErrors.push(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å ${limitMessageLength} ${matchWord(limitMessageLength, '—Å–∏–º–≤–æ–ª', '–æ–≤', '', '–∞')}.`);
		}

		if (validationErrors.length > 0) {
			return response.status(400).json({
				SUCCESS: false,
				VALIDATION_ERRORS: validationErrors
			});
		}

		if (!authenticateUser(username, getSha256Hash(password))) {
			return response.status(401).json({
				SUCCESS: false,
				MESSAGE: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.'
			});
		}

		const [successResult, feedbackResult] = pushChatMessage(username, message, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', ipAddress);
		writeTimestampIntoProjectStorage(projectPaths.FILES.ACCUMULATED.UNFREEZING.USER, Date.now() + settings.API_REQUEST.BETWEEN_QUERIES / 4 * 1000);

		if (successResult === true) {
			updateHistory(feedbackResult);
			writeTimestampIntoProjectStorage(projectPaths.FILES.ACCUMULATED.UNFREEZING.LLM, 0);
			response.json({
				SUCCESS: true,
				MESSAGE: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
			});
			console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <${username}> —Å IP-–∞–¥—Ä–µ—Å–∞: ¬´${ipAddress}¬ª ‚Üí {\n${message}\n}`);
		} else {
			console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª —á–∞—Ç–∞.');
			response.status(500).json({
				SUCCESS: false,
				MESSAGE: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'
			});
		}
	} catch (error) {
		console.error(`–°–ª—É—á–∏–ª–∞—Å—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí ${formatErrorMessage(error)}`);
		response.status(500).json({
			SUCCESS: false,
			MESSAGE: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
		});
	}
});

application.listen(settings.WEBSITE.SERVER_PORT, () => {
	console.log(`–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–µ ${settings.WEBSITE.SERVER_PORT}. [http://localhost:${settings.WEBSITE.SERVER_PORT}]`);
});



// ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞, –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –µ—ë –≤—ã–∑–æ–≤ =====

function buildPrompt() {
	let parts = [];
	let content;

	content = readProjectFileContent(projectPaths.FILES.GENERAL.CHARACTER, '–ø–µ—Ä—Å–æ–Ω–∞–∂–∞', true);
	if (content !== '') parts.push(`===== –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å =====\n\n${content}`);

	content = readProjectFileContent(projectPaths.FILES.GENERAL.INSTRUCTIONS, '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π', false);
	parts.push(`===== –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é =====\n\n${content}`);

	content = formHistoryContent();
	if (content !== '') parts.push(`===== –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π =====\n\n${content}`);	

	content = readProjectFileContent(projectPaths.FILES.ACCUMULATED.PARSING_RESULT, '–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞', true);
	if (content !== '') parts.push(`===== –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ =====\n\n${content}`);

	content = formTrackingContent();
	if (content !== '') parts.push(`===== –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã =====\n\n${content}`);

	content = readProjectFileContent(projectPaths.FILES.ACCUMULATED.MEMORY, '–ø–∞–º—è—Ç–∏', true);
	if (content !== '') parts.push(`===== –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å =====\n\n${content}`);

	content = `–¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚Üí [${getTimestamp()}]. –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ ‚Üí ${settings.PROMPT_LIMITS.HISTORY.TURNS}. –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API ‚Üí ${settings.API_REQUEST.BETWEEN_QUERIES}. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏ ‚Üí ¬´${path.relative(__dirname, projectPaths.FOLDERS.WORKSPACE)}¬ª.`;
	parts.push(`===== –ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è =====\n\n${content}`);

	content = formBlacklistContent();
	if (content !== '') parts.push(`===== –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====\n\n${content}`);

	content = formChatContent(true);
	if (content !== '') parts.push(`===== –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ =====\n\n${content}`);

	let resultContent = parts.join('\n\n\n\n');
	let resultTokens = tokenizer.encode(resultContent);
	const limitNumber = settings.PROMPT_LIMITS.TOTAL_TOKENS_COUNT;
	if (resultTokens.length > limitNumber) {
		resultTokens = resultTokens.slice(0, limitNumber);
		resultContent = `${tokenizer.decode(resultTokens)}‚Ä¶\n\n–ü—Ä–æ–º–ø—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –ø–æ –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–º—É —á–∏—Å–ª—É —Ç–æ–∫–µ–Ω–æ–≤! –°—Ä–æ—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–ª–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–µ –∑–∞–ø–∏—Å–∏!`;
	}
	return resultContent;
}

async function main() {
	setConsoleTitle(path.basename(__dirname));
	while (!breakMainCycle) {
		try {
			if (Date.now() >= readTimestampFromProjectStorage(projectPaths.FILES.ACCUMULATED.UNFREEZING.LLM)) {
				const combinedPrompt = buildPrompt();
				//console.log(`‚Üí {\n==== –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç ====\n\n${combinedPrompt}\n}`);
				console.log(`–ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–º–ø—Ç ‚Üí ${tokenizer.encode(combinedPrompt).length}.`);
				
				if (geminiApiKey === null) {
					[geminiApiKey] = checkApiKeysAndGetArray();
				}
				// –≠—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.
				const genAI = new GoogleGenerativeAI(geminiApiKey);
				const model = genAI.getGenerativeModel({
					model: 'gemini-2.5-flash'
				});

				const result = await model.generateContent(combinedPrompt);
				const responseLLM = result.response.text();
				console.log(`–ü—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ‚Üí ${tokenizer.encode(responseLLM).length}.`);
				const feedback = await executeCommands(responseLLM);

				const action = `==== –û—Ç–≤–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ====\n\n${responseLLM}\n\n==== –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π ====\n\n${feedback}`;
				updateHistory(action);
				console.log(`‚Üí {\n${action}\n}`);
			}
			await new Promise(resolve => setTimeout(resolve, settings.API_REQUEST.BETWEEN_QUERIES * 1000));
		} catch (error) {
			const feedback = '–ü—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini API ‚Üí';
			let description = null;

			// –ù–µ–∏—Å–ø—Ä–∞–≤–∏–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –æ—à–∏–±–∫–∏.
			if (error.message.includes('User location is not supported')) {
				description = `${feedback} –õ–æ–∫–∞—Ü–∏—è IP-–∞–¥—Ä–µ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.`;
			} else if (error.message.includes('PROHIBITED_CONTENT')) {
				description = `${feedback} –ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚Äî ¬´PROHIBITED_CONTENT¬ª.`;
			}
			if (description !== null) {
				console.error(description);
				finishProcess();
			}

			// –°–∏—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–ø–æ–ª–Ω–µ –ª–µ–≥–∫–æ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
			if (error.message.includes('API key not valid')) {
				description = `${feedback} –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á.`;
				exceptApiKey(geminiApiKey);
				geminiApiKey = null;
			} else if (error.message.includes('You exceeded your current quota')) {
				description = `${feedback} –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –¥–ª—è –∫–ª—é—á–∞ ¬´${geminiApiKey}¬ª.`;
				tryChangeApiKey(geminiApiKey);
			}
			if (description !== null) {
				console.error(description);
			}

			// –ü—Ä–æ—á–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∏–∫–∞–∫ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.
			if (description === null) {
				console.error(`–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ ‚Üí ${formatErrorMessage(error)}`);
			}

			await new Promise(resolve => setTimeout(resolve, settings.API_REQUEST.FOR_CASE_OF_FAILURE * 1000));
		} finally {
			isUsed.SEND_MESSAGE = false;
			isUsed.FETCH_URL = false;
			isUsed.CLEAR_LAST_URL_CONTENT = false;
			isUsed.CLEAR_HISTORY = false;
			isUsed.WAIT = false;
		}
	}
}

main().catch(error => {
	console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å ‚Üí ${formatErrorMessage(error)}`);
	finishProcess();
});



// ===== –ê–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ =====

function pullArguments(responseLLM, syntaxBeginIndex, commandName, argumentsQuantity) {
	if (typeof argumentsQuantity !== 'number' || !Number.isInteger(argumentsQuantity) || argumentsQuantity <= 0) {
		throw new Error('–î–ª—è –∫–æ–º–∞–Ω–¥—ã, –∏–º–µ—é—â–µ–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.');
	}

	const firstDelimiter = '($$$$$';

	// –ö–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ø–æ–º—è–Ω—É—Ç–∞ –±–µ–∑ –Ω–∏—Ö, –∏ —Ç–æ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç —Å—Ä–∞–∑—É –∂–µ –µ—ë –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
	if (responseLLM.indexOf(firstDelimiter, syntaxBeginIndex + commandName.length) !== syntaxBeginIndex + commandName.length) {
		return null;
	}

	const result = []; // –ú–∞—Å—Å–∏–≤, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É: –≤–ø–µ—Ä–µ–¥–∏ –∏–¥—É—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –∫–æ–Ω–µ—Ü –≤—Å–µ–≥–¥–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.
	const commandStart = commandName + firstDelimiter;
	let currentIndex = syntaxBeginIndex + commandStart.length;

	for (let order = 1; order <= argumentsQuantity; order++) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —á–∏—Å–ª–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
		const isLast = order === argumentsQuantity;
		const nextDelimiter = isLast ? '$$$$$)' : '$$$$$, $$$$$';
		const delimiterIndex = responseLLM.indexOf(nextDelimiter, currentIndex);
		if (delimiterIndex === -1) {
			return null;
		}

		const argumentBeginningIndex = currentIndex;
		const argumentEndingIndex = delimiterIndex - 1;
		let argument;

		// –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω—ã–º –∏ –∫–æ–Ω–µ—á–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
		if (argumentBeginningIndex > argumentEndingIndex) {
			argument = '';
		}
		// –ú–µ—Ç–æ–¥ substring –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Å–∏–º–≤–æ–ª—ã, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏ –¥–æ, –ù–û –ù–ï –í–ö–õ–Æ–ß–ê–Ø, –¥—Ä—É–≥–æ–π –∏–Ω–¥–µ–∫—Å.
		else argument = responseLLM.substring(argumentBeginningIndex, argumentEndingIndex + 1);

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª–∞ –≤—ã–∑–æ–≤ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π.
		if (argument.includes(firstDelimiter)) {
			return null;
		}

		result.push(argument);
		currentIndex = delimiterIndex + nextDelimiter.length;
	}

	const syntaxEndIndex = currentIndex - 1; // –ò–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ü–æ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
	result.push(syntaxEndIndex);
	return result;
}

function processRecievedText(responseLLM) {
	let positionIndex = 0; // –ò–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
	let complete = false; // –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞.
	const structures = []; // –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –∏–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–≤ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é.
	do {
		if (positionIndex >= responseLLM.length) {
			complete = true;
		} else {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
			const locationsOfCommands = [];
			for (let commandName of listOfCommands) {
				let startIndex = responseLLM.indexOf(commandName, positionIndex);
				locationsOfCommands.push(startIndex);
			}

			// –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–∏ —É—á—ë—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
			let syntaxBeginIndex = Infinity; // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
			let designationIdentifier = -1; // –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥.
			for (let elementIndex = 0; elementIndex < locationsOfCommands.length; elementIndex++) {
				const currentElement = locationsOfCommands[elementIndex]; // –Ø–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.
				if (currentElement !== -1 && currentElement < syntaxBeginIndex) {
					syntaxBeginIndex = currentElement;
					designationIdentifier = elementIndex;
				}
			}

			// –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Å–ª–µ–¥—É–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –µ—ë —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.
			if (syntaxBeginIndex !== Infinity) {
				const commandName = listOfCommands[designationIdentifier];
				let pullResult = null;
				let syntaxEndIndex;
				switch (commandName) {
					case 'MemoryAppend': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'MemoryEdit': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'MemoryRemove': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;

					case 'SendMessage': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'DeleteMessage': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'Punish': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 3); break;
					case 'Forgive': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					
					case 'FetchURL': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'ClearLastURLContent': pullResult = []; pullResult.push(syntaxBeginIndex + commandName.length - 1); break;

					case 'CreateFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'GetFileInfo': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'TrackFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'ForgetFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'CreateDirectory': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'TrackDirectory': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'ForgetDirectory': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'Delete': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;
					case 'Move': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'Rename': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'AddToFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'ReplaceInFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 3); break;
					case 'RemoveFromFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;
					case 'RewriteFile': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 2); break;

					case 'ClearHistory': pullResult = []; pullResult.push(syntaxBeginIndex + commandName.length - 1); break;
					case 'Wait': pullResult = pullArguments(responseLLM, syntaxBeginIndex, commandName, 1); break;

					default: pullResult = null;
				}
				if (pullResult !== null) {
					syntaxEndIndex = pullResult.pop(); // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–Ω—Ü–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–º–∞–Ω–¥—ã.
					const commandObject = {
						COMMAND_NAME: commandName,
						ARGUMENTS: pullResult
					};
					if (commandName === 'ClearLastURLContent' || commandName === 'DeleteMessage') {
						structures.unshift(commandObject);
					} else {
						structures.push(commandObject);
					}
					positionIndex = syntaxEndIndex + 1; // –ù–∞–≥–ª—è–¥–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–Ω—Ü–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–º–∞–Ω–¥—ã.
				} else { // –ï—Å–ª–∏ –∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–ø—É—Å–∫, —Ä–∞–≤–Ω—ã–π –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
					positionIndex = syntaxBeginIndex + commandName.length;
				}				
			} else {
				complete = true;
			}
		}
	} while (!complete);
	return structures;
}

async function executeCommands(responseLLM) {
	const feedbacks = []; // –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ –æ—Ç–∫–ª–∏–∫–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
	const structures = processRecievedText(responseLLM);
	for (let commandObject of structures) {
		const commandName = commandObject.COMMAND_NAME;
		const commandParameters = commandObject.ARGUMENTS;
		switch (commandName) {
			case 'MemoryAppend': feedbacks.push(handleMemoryAppend(commandParameters)); break;
			case 'MemoryEdit': feedbacks.push(handleMemoryEdit(commandParameters)); break;
			case 'MemoryRemove': feedbacks.push(handleMemoryRemove(commandParameters)); break;

			case 'SendMessage': feedbacks.push(handleSendMessage(commandParameters)); break;
			case 'DeleteMessage': feedbacks.push(handleDeleteMessage(commandParameters)); break;
			case 'Punish': feedbacks.push(handlePunish(commandParameters)); break;
			case 'Forgive': feedbacks.push(handleForgive(commandParameters)); break;

			case 'FetchURL': feedbacks.push(await handleFetchURL(commandParameters)); break;
			case 'ClearLastURLContent': feedbacks.push(handleClearLastURLContent()); break;

			case 'CreateFile': feedbacks.push(handleCreateFile(commandParameters)); break;
			case 'GetFileInfo': feedbacks.push(handleGetFileInfo(commandParameters)); break;
			case 'TrackFile': feedbacks.push(handleTrackFile(commandParameters)); break;
			case 'ForgetFile': feedbacks.push(handleForgetFile(commandParameters)); break;
			case 'CreateDirectory': feedbacks.push(handleCreateDirectory(commandParameters)); break;
			case 'TrackDirectory': feedbacks.push(handleTrackDirectory(commandParameters)); break;
			case 'ForgetDirectory': feedbacks.push(handleForgetDirectory(commandParameters)); break;
			case 'Delete': feedbacks.push(handleDelete(commandParameters)); break;
			case 'Move': feedbacks.push(handleMove(commandParameters)); break;
			case 'Rename': feedbacks.push(handleRename(commandParameters)); break;
			case 'AddToFile': feedbacks.push(handleAddToFile(commandParameters)); break;
			case 'ReplaceInFile': feedbacks.push(handleReplaceInFile(commandParameters)); break;
			case 'RemoveFromFile': feedbacks.push(handleRemoveFromFile(commandParameters)); break;
			case 'RewriteFile': feedbacks.push(handleRewriteFile(commandParameters)); break;

			case 'ClearHistory': feedbacks.push(handleClearHistory(commandParameters)); break;
			case 'Wait': feedbacks.push(handleWait(commandParameters)); break;
		}
	}
	let result = '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.';
	if (feedbacks.length !== 0) {
		result = feedbacks.join('\n');
	}
	return result;
}



// ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π =====

// --- üìí –£–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ ---

function handleMemoryAppend(commandParameters) {
	let [additionalText] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ MemoryAppend ‚Üí`;

	try {
		additionalText = additionalText.replaceAll('\\n', '\n').replaceAll('\\t', '\t');
		appendIntoFile(projectPaths.FILES.ACCUMULATED.MEMORY, additionalText);
		return `${feedback} –ü–∞–º—è—Ç—å –±—ã–ª–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º.`;
	} catch (error) {
		return `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–º—è—Ç–∏ ‚Üí ${formatErrorMessage(error)}`;
	}
}

function handleMemoryEdit(commandParameters) {
	let [existingStatement, suggestedChange] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ MemoryEdit ‚Üí`;
	
	try {
		existingStatement = existingStatement.replaceAll('\\n', '\n').replaceAll('\\t', '\t');
		suggestedChange = suggestedChange.replaceAll('\\n', '\n').replaceAll('\\t', '\t');
		const projectObject = projectPaths.FILES.ACCUMULATED.MEMORY;
		let fileContent = readProjectFileContent(projectObject, '–ø–∞–º—è—Ç–∏', true);
		if (fileContent.includes(existingStatement)) {
			fileContent = fileContent.replaceAll(existingStatement, suggestedChange);
			writeIntoFile(projectObject, fileContent);
			return `${feedback} –í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.`;
		}
		return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.`;
	} catch (error) {
		return `–ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚Üí ${formatErrorMessage(error)}`;
	}
}

function handleMemoryRemove(commandParameters) {
	let [existingStatement] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ MemoryRemove ‚Üí`;

	try {
		existingStatement = existingStatement.replaceAll('\\n', '\n').replaceAll('\\t', '\t');
		const projectObject = projectPaths.FILES.ACCUMULATED.MEMORY;
		let fileContent = readProjectFileContent(projectObject, '–ø–∞–º—è—Ç–∏', true);
		if (fileContent.includes(existingStatement)) {
			fileContent = fileContent.replaceAll(existingStatement, '');
			writeIntoFile(projectObject, fileContent);
			return `${feedback} –ö–∞–∂–¥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–º—è—Ç–∏.`;
		}
		return `${feedback} –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É ‚Äî —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`;
	} catch (error) {
		return `–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤–æ—Å–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏ ‚Üí ${formatErrorMessage(error)}`;
	}
}

// --- üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–µ–¥–µ–Ω–∏–µ —á–∞—Ç–∞ ---

function handleSendMessage(commandParameters) {
	let [nickname, message] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ SendMessage ‚Üí`;

	if (isUsed.SEND_MESSAGE) {
		return `${feedback} –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –ø—Ä–æ–º–ø—Ç.`;
	}
	isUsed.SEND_MESSAGE = true;

	nickname = nickname.replace(/\s+/g, ' ').trim();
	message = message.replaceAll('\\n', '\n').replaceAll('\\t', '\t').trim();

	if (nickname.length === 0) {
		return `${feedback} –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (message.length === 0) {
		return `${feedback} –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	const [successResult, designation] = pushChatMessage(nickname, message, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', null);
	if (!successResult) {
		return `${feedback} (–ù–µ—É–¥–∞—á–∞) ${designation}`;
	}
	return `${feedback} (–£—Å–ø–µ—Ö) ${designation}`;
}

function handleDeleteMessage(commandParameters) {
	let [identifierString] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ DeleteMessage —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ${identifierString} ‚Üí`;

	const identifier = parseInt(identifierString, 10);
	if (isNaN(identifier) || !Number.isInteger(identifier) || identifier <= 0) {
		return `${feedback} –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.`;
	}

	const [successResult, designation] = deleteChatMessage(identifier);

	if (!successResult) {
		return `${feedback} (–ù–µ—É–¥–∞—á–∞) ${designation}`;
	}
	return `${feedback} (–£—Å–ø–µ—Ö) ${designation}`;
}

function handlePunish(commandParameters) {
	let [username, ipAddress, reason] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Punish ‚Üí`;
	
	username = username.replace(/\s+/g, ' ').trim();
	ipAddress = ipAddress.trim();
	reason = reason.trim();

	if (username.length === 0) {
		return `${feedback} –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (ipAddress.length === 0) {
		return `${feedback} IP-–∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (reason.length === 0) {
		return `${feedback} –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.`;
	}

	return `${feedback} ${pushIntoBlacklist(username, ipAddress, reason)}`;
}

function handleForgive(commandParameters) {
    let [ipAddress] = commandParameters;
    const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Forgive ‚Üí`;

    ipAddress = ipAddress.trim();
    if (ipAddress.length === 0) {
		return `${feedback} IP-–∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
    const [successResult, resultMessage] = deleteFromBlacklist(ipAddress);

    if (successResult) {
        return `${feedback} (–£—Å–ø–µ—Ö) ${resultMessage}`;
    } else {
        return `${feedback} (–ù–µ—É–¥–∞—á–∞) ${resultMessage}`;
    }
}

// --- üåê –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ ---

async function handleFetchURL(commandParameters) {
	let [urlAddress] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ FetchURL ‚Üí`;

	if (isUsed.FETCH_URL) {
		return `${feedback} –í —ç—Ç–æ–º –ø—Ä–æ–º–ø—Ç–µ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.`;
	}
	isUsed.FETCH_URL = true;

	try {
		urlAddress = urlAddress.trim();
		if (urlAddress.length === 0) {
			return `${feedback} URL-–∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
		}
		if (!urlAddress.startsWith('http://') && !urlAddress.startsWith('https://')) {
			return `${feedback} –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL-–∞–¥—Ä–µ—Å–∞: –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å ¬´http://¬ª –∏–ª–∏ ¬´https://¬ª.`;
		}

		let response;
		try {
			const controller = new AbortController();
			const timeoutObject = setTimeout(() => controller.abort(), 15 * 1000); 
			response = await fetch(urlAddress, { signal: controller.signal });
			clearTimeout(timeoutObject);
		} catch (exception) {
			if (exception.name === 'AbortError') {
				return `${feedback} –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.`;
			}
			return `${feedback} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Üí ${formatErrorMessage(exception)}.`;
		}

		if (!response.ok) {
			return `${feedback} –ù–µ—É–¥–∞—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ ¬´${response.status}¬ª.`;
		}

		const contentType = response.headers.get('content-type');
		if (!contentType || !contentType.startsWith('text/')) {
			return `${feedback} –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ¬´${contentType || '–Ω–µ —É–∫–∞–∑–∞–Ω'}¬ª. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.`;
		}

		let rawContent = await response.text();
		const truncationMessages = [];

		const byteLimit = settings.PROMPT_LIMITS.FETCH_URL.BYTES;
		const initialByteLength = Buffer.byteLength(rawContent, 'utf8');
		if (initialByteLength > byteLimit) {
			const initialBuffer = Buffer.from(rawContent, 'utf8');
			const truncatedBuffer = initialBuffer.slice(0, byteLimit);
			rawContent = truncatedBuffer.toString('utf8');
			truncationMessages.push(`–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ –±–∞–π—Ç–æ–≤–æ–º—É –ª–∏–º–∏—Ç—É.`);
		}

		let extractedText = stripHtmlTags(rawContent);

		const tokenLimit = settings.PROMPT_LIMITS.FETCH_URL.TOKENS;
		const initialTokensCount = tokenizer.encode(extractedText).length;
		if (initialTokensCount > tokenLimit) {
			const initialTokens = tokenizer.encode(extractedText);
			const truncatedTokens = initialTokens.slice(0, tokenLimit);
			extractedText = tokenizer.decode(truncatedTokens);
			truncationMessages.push(`–ö–æ–Ω—Ç–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω –ø–æ —Ç–æ–∫–µ–Ω–æ–≤–æ–º—É –ª–∏–º–∏—Ç—É.`);
		}

		let finalContent = `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ URL ¬´${urlAddress}¬ª ‚Üí {\n${extractedText}\n}`;
		if (extractedText === '') {
			finalContent = `URL ¬´${urlAddress}¬ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –æ–Ω –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.`;
		}

		writeIntoFile(projectPaths.FILES.ACCUMULATED.PARSING_RESULT, finalContent); 

		let successMessage = `–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç URL-–∞–¥—Ä–µ—Å–∞ ¬´${urlAddress}¬ª.`;
		if (truncationMessages.length > 0) {
			successMessage += ` ${truncationMessages.join(' ')}`;
		}
		
		return `${feedback} ${successMessage}`;
	} catch (error) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleClearLastURLContent() {
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ClearLastURLContent ‚Üí`;

	if (isUsed.CLEAR_LAST_URL_CONTENT) {
		return `${feedback} –í —ç—Ç–æ–º –ø—Ä–æ–º–ø—Ç–µ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.`;
	}
	isUsed.CLEAR_LAST_URL_CONTENT = true;

	try {
		writeIntoFile(projectPaths.FILES.ACCUMULATED.PARSING_RESULT, '');
		return `${feedback} –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É URL-–∞–¥—Ä–µ—Å—É —Å—Ç—ë—Ä—Ç—ã.`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ ‚Üí ${formatErrorMessage(error)}.`;
	}
}

// --- ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π ---

function handleCreateFile(commandParameters) {
	let [parentDirectoryPath, newFileName] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ CreateFile ‚Üí`;

	parentDirectoryPath = parentDirectoryPath.trim();
	newFileName = newFileName.trim();

	if (parentDirectoryPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (newFileName.length === 0) {
		return `${feedback} –ò–º—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedParentPath = path.resolve(parentDirectoryPath); 
		if (!fs.existsSync(resolvedParentPath)) {
			return `${feedback} –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
		}
		if (!fs.statSync(resolvedParentPath).isDirectory()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.`;
		}

		const filePath = path.join(resolvedParentPath, newFileName);
		if (!filePath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (fs.existsSync(filePath)) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`;
		}

		fs.writeFileSync(filePath, '', 'utf-8');
		return `${feedback} –ù–æ–≤—ã–π —Ñ–∞–π–ª ¬´${newFileName}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ –ø—É—Ç–∏ ¬´${parentDirectoryPath}¬ª.`;
	} catch (exception) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Üí ${formatErrorMessage(exception)}.`;
	}
}

function handleGetFileInfo(commandParameters) {
	let [objectPath] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ GetFileInfo ‚Üí`;

	objectPath = objectPath.trim();
	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`;
		}
		const stats = fs.statSync(resolvedPath);
		if (!stats.isFile()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.`;
		}
		return `${feedback} –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ ¬´${objectPath}¬ª ‚Üí –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö: ${stats.size}; –ë—ã–ª –∏–∑–º–µ–Ω—ë–Ω: ${stats.mtime.toLocaleString()}; –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ chmod: ${(stats.mode & 0o777).toString(8)}.`;
	} catch (exception) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ ‚Üí ${formatErrorMessage(exception)}.`;
	}
}

function handleTrackFile(commandParameters) {
	let [suggestedFilePath] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ TrackFile ‚Üí`;

	suggestedFilePath = suggestedFilePath.trim();
	if (suggestedFilePath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const fullPath = path.resolve(suggestedFilePath);

		if (!fullPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(fullPath)) {
			return `${feedback} –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
		}
		const stats = fs.statSync(fullPath);
		if (!stats.isFile()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.`;
		}

		const [isBinary] = binaryFileExpectation(fullPath);
		if (isBinary) {
			return `${feedback} –ù–µ–ª—å–∑—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã.`;
		}

		const projectObject = projectPaths.FILES.ACCUMULATED.TRACKING.FILES;
		let trackedFiles = readArrayFromProjectFile(projectObject);
		const relativePathToStore = path.relative(__dirname, fullPath);

		if (trackedFiles.includes(relativePathToStore)) {
			return `${feedback} –§–∞–π–ª ¬´${relativePathToStore}¬ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`;
		}

		trackedFiles.push(relativePathToStore);
		writeIntoFile(projectObject, JSON.stringify(trackedFiles, null, '\t'));
		return `${feedback} –§–∞–π–ª ¬´${relativePathToStore}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleForgetFile(commandParameters) {
	let [filePathToForget] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ForgetFile ‚Üí`;

	filePathToForget = filePathToForget.trim();
	if (filePathToForget.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const fullPathToForget = path.resolve(filePathToForget);
		if (!fullPathToForget.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}

		const projectObject = projectPaths.FILES.ACCUMULATED.TRACKING.FILES;
		let trackedFiles = readArrayFromProjectFile(projectObject);
		const relativePathToForget = path.relative(__dirname, fullPathToForget);

		const initialLength = trackedFiles.length;
		const updatedTrackedFiles = trackedFiles.filter(elementValue => elementValue !== relativePathToForget);

		if (updatedTrackedFiles.length === initialLength) {
			return `${feedback} –§–∞–π–ª ¬´${relativePathToForget}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`;
		}

		writeIntoFile(projectObject, JSON.stringify(updatedTrackedFiles, null, '\t'));
		return `${feedback} –§–∞–π–ª ¬´${relativePathToForget}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleCreateDirectory(commandParameters) {
	let [parentDirectoryPath, newDirectoryName] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ CreateDirectory ‚Üí`;

	parentDirectoryPath = parentDirectoryPath.trim();
	newDirectoryName = newDirectoryName.trim();

	if (parentDirectoryPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (newDirectoryName.length === 0) {
		return `${feedback} –ò–º—è –Ω–æ–≤–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedParentPath = path.resolve(parentDirectoryPath);
		if (!fs.existsSync(resolvedParentPath)) {
			return `${feedback} –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
		}
		if (!fs.statSync(resolvedParentPath).isDirectory()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.`;
		}

		const objectPath = path.join(resolvedParentPath, newDirectoryName);
		if (!objectPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (fs.existsSync(objectPath)) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`;
		}
		fs.mkdirSync(objectPath);
		return `${feedback} –ù–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥ ¬´${newDirectoryName}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ –ø—É—Ç–∏ ¬´${parentDirectoryPath}¬ª.`;
	} catch (exception) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ ‚Üí ${formatErrorMessage(exception)}.`;
	}
}

function handleTrackDirectory(commandParameters) {
	let [suggestedDirectoryPath] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ TrackDirectory ‚Üí`;

	suggestedDirectoryPath = suggestedDirectoryPath.trim();
	if (suggestedDirectoryPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const fullPath = path.resolve(suggestedDirectoryPath);

		if (!fullPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(fullPath)) {
			return `${feedback} –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`;
		}
		const stats = fs.statSync(fullPath);
		if (!stats.isDirectory()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.`;
		}

		const projectObject = projectPaths.FILES.ACCUMULATED.TRACKING.FOLDERS;
		let trackedDirectories = readArrayFromProjectFile(projectObject);
		const relativePathToStore = path.relative(__dirname, fullPath);

		if (trackedDirectories.includes(relativePathToStore)) {
			return `${feedback} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ¬´${relativePathToStore}¬ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.`;
		}

		trackedDirectories.push(relativePathToStore);
		writeIntoFile(projectObject, JSON.stringify(trackedDirectories, null, '\t'));
		return `${feedback} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ¬´${relativePathToStore}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleForgetDirectory(commandParameters) {
	let [directoryPathToForget] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ForgetDirectory ‚Üí`;

	directoryPathToForget = directoryPathToForget.trim();
	if (directoryPathToForget.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const fullPathToForget = path.resolve(directoryPathToForget);
		if (!fullPathToForget.startsWith(path.resolve(projectPaths.FOLDERS.WORKSPACE))) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}

		const projectObject = projectPaths.FILES.ACCUMULATED.TRACKING.FOLDERS;
		let trackedDirectories = readArrayFromProjectFile(projectObject);
		const relativePathToForget = path.relative(__dirname, fullPathToForget);

		const initialLength = trackedDirectories.length;
		const updatedTrackedDirectories = trackedDirectories.filter(elementValue => elementValue !== relativePathToForget);

		if (updatedTrackedDirectories.length === initialLength) {
			return `${feedback} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ¬´${relativePathToForget}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`;
		}

		writeIntoFile(projectObject, JSON.stringify(updatedTrackedDirectories, null, '\t'));
		return `${feedback} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ¬´${relativePathToForget}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`;
	} catch (error) {
		return `${feedback} –°–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ –≤—ã—à–ª–æ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—É—é –ø–∞–ø–∫—É ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleDelete(commandParameters) {
	let [objectPath] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Delete ‚Üí`;

	objectPath = objectPath.trim();
	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (resolvedPath === projectPaths.FOLDERS.WORKSPACE) {
			return `${feedback} –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É —Å—Ç–∞–Ω—Ü–∏–∏.`;
		}

		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ ¬´${objectPath}¬ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.`;
		}
		const stats = fs.statSync(resolvedPath);
		if (stats.isFile()) {
			fs.unlinkSync(resolvedPath);
			return `${feedback} –§–∞–π–ª ¬´${objectPath}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`;
		} else if (stats.isDirectory()) {
			fs.rmSync(resolvedPath, { recursive: true, force: true });
			return `${feedback} –ö–∞—Ç–∞–ª–æ–≥ ¬´${objectPath}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`;
		}
		return `${feedback} –£–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.`;
	} catch (error) {
		return `${feedback} –í–æ–∑–Ω–∏–∫–ª–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ¬´${objectPath}¬ª ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleMove(commandParameters) {
	let [existingPath, newPath] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Move ‚Üí`;

	existingPath = existingPath.trim();
	newPath = newPath.trim();

	if (existingPath.length === 0) {
		return `${feedback} –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (newPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedExistingPath = path.resolve(existingPath);
		const resolvedNewPath = path.resolve(newPath);

		if (!resolvedExistingPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å ¬´${existingPath}¬ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!resolvedNewPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ¬´${newPath}¬ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (resolvedExistingPath === projectPaths.FOLDERS.WORKSPACE) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É —Å—Ç–∞–Ω—Ü–∏–∏.`;
		}
		if (!fs.existsSync(resolvedExistingPath)) {
			return `${feedback} –ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ –ø—É—Ç–∏ ¬´${existingPath}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
		}

		if (fs.existsSync(resolvedNewPath)) {
			const existingPathStats = fs.statSync(resolvedExistingPath);
			const newPathStats = fs.statSync(resolvedNewPath);

			if (newPathStats.isDirectory()) {
				if (existingPathStats.isDirectory() && resolvedNewPath.startsWith(resolvedExistingPath + path.sep)) {
					return `${feedback} –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ¬´${existingPath}¬ª –≤ –µ—ë –∂–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ¬´${newPath}¬ª.`;
				}
				return `${feedback} –í –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é.`;
			} else if (newPathStats.isFile()) {
				return `${feedback} –í –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏.`;
			}
		}

		fs.renameSync(resolvedExistingPath, resolvedNewPath);
		return `${feedback} –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â—ë–Ω –∏–∑ ¬´${path.relative(__dirname, resolvedExistingPath)}¬ª –≤ ¬´${path.relative(__dirname, resolvedNewPath)}¬ª.`;
	} catch (error) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleRename(commandParameters) {
	let [objectPath, newName] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Rename ‚Üí`;

	objectPath = objectPath.trim();
	newName = newName.trim();

	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ –æ–±—ä–µ–∫—Ç—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (newName.length === 0) {
		return `${feedback} –ù–æ–≤–æ–µ –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (resolvedPath === projectPaths.FOLDERS.WORKSPACE) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É —Å—Ç–∞–Ω—Ü–∏–∏.`;
		}
		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ –ø—É—Ç–∏ ¬´${objectPath}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.`;
		}

		if (newName.includes(path.sep) || newName.includes('/') || newName.includes('\\')) {
			return `${feedback} –ù–æ–≤–æ–µ –∏–º—è ¬´${newName}¬ª –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—É—Ç–∏ (/, \\, ${path.sep}).`;
		}

		const parentDirectory = path.dirname(resolvedPath);
		const newFullPath = path.join(parentDirectory, newName);

		if (fs.existsSync(newFullPath) && newFullPath !== resolvedPath) {
			return `${feedback} –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ¬´${path.relative(__dirname, parentDirectory)}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º ¬´${newName}¬ª.`;
		}

		fs.renameSync(resolvedPath, newFullPath);
		return `${feedback} –û–±—ä–µ–∫—Ç ¬´${path.basename(resolvedPath)}¬ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ ¬´${newName}¬ª.`;
	} catch (error) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleAddToFile(commandParameters) {
	let [objectPath, newRecord] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ AddToFile ‚Üí`;

	objectPath = objectPath.trim();
	newRecord = newRecord.replaceAll('\\n', '\n').replaceAll('\\t', '\t');

	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ ¬´${objectPath}¬ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.`;
		}
		const stats = fs.statSync(resolvedPath);
		if (!stats.isFile()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å ¬´${objectPath}¬ª –≤–µ–¥—ë—Ç –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.`;
		}
		let [isBinary] = binaryFileExpectation(resolvedPath);
		if (isBinary) {
			return `${feedback} –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª ¬´${objectPath}¬ª.`;
		}

		fs.appendFileSync(resolvedPath, newRecord, 'utf-8');
		return `${feedback} –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª.`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –¥–æ–∑–∞–ø–∏—Å–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª ¬´${objectPath}¬ª ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleReplaceInFile(commandParameters) {
	let [objectPath, existingStatement, suggestedChange] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ReplaceInFile ‚Üí`;

	objectPath = objectPath.trim();
	existingStatement = existingStatement.replaceAll('\\n', '\n').replaceAll('\\t', '\t');
	suggestedChange = suggestedChange.replaceAll('\\n', '\n').replaceAll('\\t', '\t');

	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (existingStatement.length === 0) {
		return `${feedback} –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ ¬´${objectPath}¬ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.`;
		}
		const stats = fs.statSync(resolvedPath);
		if (!stats.isFile()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å ¬´${objectPath}¬ª –≤–µ–¥—ë—Ç –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.`;
		}

		let [isBinary, fileContent] = binaryFileExpectation(resolvedPath);
		if (isBinary) {
			return `${feedback} –ù–µ–ª—å–∑—è –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–∞–π–ª–µ ¬´${objectPath}¬ª.`;
		}

		if (fileContent.includes(existingStatement)) {
			fileContent = fileContent.replaceAll(existingStatement, suggestedChange);
			fs.writeFileSync(resolvedPath, fileContent, 'utf-8');
			return `${feedback} –í—Å–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ¬´${existingStatement}¬ª –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ –≤ —Ñ–∞–π–ª–µ ¬´${objectPath}¬ª.`;
		}
		return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ¬´${existingStatement}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ ¬´${objectPath}¬ª ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.`;
	} catch (error) {
		return `${feedback} –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleRemoveFromFile(commandParameters) {
	let [objectPath, existingStatement] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ RemoveFromFile ‚Üí`;

	objectPath = objectPath.trim();
	existingStatement = existingStatement.replaceAll('\\n', '\n').replaceAll('\\t', '\t');

	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}
	if (existingStatement.length === 0) {
		return `${feedback} –¢–µ–∫—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ ¬´${objectPath}¬ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.`;
		}
		const stats = fs.statSync(resolvedPath);
		if (!stats.isFile()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å ¬´${objectPath}¬ª –≤–µ–¥—ë—Ç –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.`;
		}
		
		let [isBinary, fileContent] = binaryFileExpectation(resolvedPath);
		if (isBinary) {
			return `${feedback} –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª.`;
		}

		if (fileContent.includes(existingStatement)) {
			fileContent = fileContent.replaceAll(existingStatement, '');
			fs.writeFileSync(resolvedPath, fileContent, 'utf-8');
			return `${feedback} –£–¥–∞–ª–µ–Ω–æ –∫–∞–∂–¥–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ ¬´${existingStatement}¬ª –∏–∑ —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª.`;
		}
		return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ¬´${existingStatement}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ ¬´${objectPath}¬ª ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ.`;
	} catch (error) {
		return `${feedback} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleRewriteFile(commandParameters) {
	let [objectPath, newContent] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ RewriteFile ‚Üí`;

	objectPath = objectPath.trim();
	newContent = newContent.replaceAll('\\n', '\n').replaceAll('\\t', '\t');

	if (objectPath.length === 0) {
		return `${feedback} –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	checkWorkspaceFolderExistence();

	try {
		const resolvedPath = path.resolve(objectPath);
		if (!resolvedPath.startsWith(projectPaths.FOLDERS.WORKSPACE)) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.`;
		}
		if (!fs.existsSync(resolvedPath)) {
			return `${feedback} –û–±—ä–µ–∫—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ ¬´${objectPath}¬ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.`;
		}
		const stats = fs.statSync(resolvedPath);
		if (!stats.isFile()) {
			return `${feedback} –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å ¬´${objectPath}¬ª –≤–µ–¥—ë—Ç –∫ –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.`;
		}

		let [isBinary] = binaryFileExpectation(resolvedPath);
		if (isBinary) {
			return `${feedback} –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–∞–π–ª–µ ¬´${objectPath}¬ª.`;
		}

		fs.writeFileSync(resolvedPath, newContent, 'utf-8');
		return `${feedback} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ¬´${objectPath}¬ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ.`;
	} catch (error) {
		return `${feedback} –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª ¬´${objectPath}¬ª –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Üí ${formatErrorMessage(error)}.`;
	}
}

// --- üíé –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---

function handleClearHistory() {
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ClearHistory ‚Üí`;

	if (isUsed.CLEAR_HISTORY) {
		return `${feedback} –í —ç—Ç–æ–º –ø—Ä–æ–º–ø—Ç–µ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.`;
	}
	isUsed.CLEAR_HISTORY = true;

	try {
		writeIntoFile(projectPaths.FILES.ACCUMULATED.HISTORY, JSON.stringify([], null, '\t'));
		return `${feedback} –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ç–æ—Ä–∏–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ.`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ç–æ—Ä–∏–∏ ‚Üí ${formatErrorMessage(error)}.`;
	}
}

function handleWait(commandParameters) {
	let [stringValue] = commandParameters;
	const feedback = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ Wait ‚Üí`;

	if (isUsed.WAIT) {
		return `${feedback} –í —ç—Ç–æ–º –ø—Ä–æ–º–ø—Ç–µ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.`;
	}
	isUsed.WAIT = true;

	stringValue = stringValue.trim();
	if (stringValue.length === 0) {
		return `${feedback} –ü–∞—Ä–∞–º–µ—Ç—Ä (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.`;
	}

	const minutes = parseInt(stringValue, 10);
	if (isNaN(minutes) || !Number.isInteger(minutes) || minutes <= 0) {
		return `${feedback} –ü–∞—Ä–∞–º–µ—Ç—Ä (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.`;
	}

	try {
		const timestamp = Date.now() + minutes * 60 * 1000;
		writeTimestampIntoProjectStorage(projectPaths.FILES.ACCUMULATED.UNFREEZING.LLM, timestamp);

		const formattedDate = new Date(timestamp).toLocaleString('ru-RU', {
			year: 'numeric', month: '2-digit', day: '2-digit',
			hour: '2-digit', minute: '2-digit', second: '2-digit'
		});

		return `${feedback} –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ ${minutes} ${matchWord(minutes, '–º–∏–Ω—É—Ç', '', '—É', '—ã')}. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –Ω–µ —Ä–∞–Ω—å—à–µ [${formattedDate}].`;
	} catch (error) {
		return `${feedback} –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É ‚Üí ${formatErrorMessage(error)}.`;
	}
}